---
title: "Exploring opencv with otters"
format: html
---

Starting with : https://docs.opencv.org/4.x/d3/df2/tutorial_py_basic_ops.html

```{python}
import numpy as np
import cv2 as cv
from matplotlib import pyplot as plt


A = cv.imread("otter.png")
plt.imshow(A)
plt.show()
```

Ok, so I can now plot an otter. Let's play with image padding a bit.

```{python}
WHITE = [255,255,255]
x = 50
B = cv.copyMakeBorder(A, x, x, x, x, cv.BORDER_REPLICATE)
C = cv.copyMakeBorder(A, x, x, x, x, cv.BORDER_CONSTANT, value=WHITE)
D = cv.copyMakeBorder(A, x, x, x, x, cv.BORDER_REFLECT)
E = cv.copyMakeBorder(A, x, x, x, x, cv.BORDER_REFLECT_101)
F = cv.copyMakeBorder(A, x, x, x, x, cv.BORDER_WRAP)

# plt.subplot takes a 3 digit integer (row, col, index)
# https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplot.html
plt.subplot(231); plt.imshow(A); plt.title("ORIG")
plt.subplot(232); plt.imshow(B); plt.title("REPLICATE")
plt.subplot(233); plt.imshow(C); plt.title("CONSTANT")
plt.subplot(234); plt.imshow(D); plt.title("REFLECT")
plt.subplot(235); plt.imshow(E); plt.title("REFLECT101")
plt.subplot(236); plt.imshow(F); plt.title("WRAP")

plt.show()
```

We can also split the image into channels. By default, matplotlib uses viridis to show color scales in one dimension (boo). https://matplotlib.org/stable/tutorials/introductory/images.html

```{python}
b,g,r = cv.split(A)
plt.subplot(131); plt.imshow(b); plt.title("blue")
plt.subplot(132); plt.imshow(g); plt.title("green")
plt.subplot(133); plt.imshow(r); plt.title("red")

plt.show()
```

Different colormaps are available, though: https://matplotlib.org/stable/tutorials/colors/colormaps.html

```{python}
b = A[:,:,0]
g = A[:,:,1]
r = A[:,:,2]

plt.subplot(131); plt.imshow(b, "Blues"); plt.title("blue")
plt.subplot(132); plt.imshow(g, "Greens"); plt.title("green")
plt.subplot(133); plt.imshow(r, "Reds"); plt.title("red")

plt.show()
```
